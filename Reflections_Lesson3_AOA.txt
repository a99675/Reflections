Question:
When would you want to use a remote repository rather than keeping all your work local?

Answer:
You'd want to use a remote repository when you collaborate with other people or want to keep your files in sync when working from different computers or just to make your work available to other people.

Question:
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Answer:
If, e.g., one of your collaborators pushed changes to the remote repository but you are still working with the old version, you might first want to finish that and only then consolidate with the changes to the remote repository made in the meanwhile.

Question:
Describe the differences between forks, clones, and branches. When would you use one instead of another?

Answer:
Forks are copies of existing repositories to your own account and can be created on GitHub only. Clones are copies of existing repositories. They can also be created locally. Branches are a new group of commits that have a separate change history. Forks are useful if you want to build on other people's work but do not have permission to change their repository. Clones are used  when you collaborate with others or when you work on the same piece on different computers. Branches are a way of grouping separate parts of changes, e.g., when adding an experimental feature.

Question:
What is the benefit of having a copy of the last known state of the remote stored locally?

Answer:
You can always see (even without internet access) which changes you have introduced since you last synced with the remote. Also, if you don't know that you even to merge remote and local changes, you can compare them first and then decide what to do.

Question:
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Answer:
Probably by sending different versions of files by email or, in the best case, using a shared server directory or online storage.
Both these options create a lot of confusion as to what has been changed and who is currently working on what since most of the time, you'd pull local copies and update the shared file later. Also, when sending around different versions it is not that easy for several people to work on the same file concurrently and then to consolidate the different changes.
However, your collaborators and you don't need to have special knowledge on version control. So the initial effort to set up collaboration is very low.

Question:
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Answer:
You would want to make changes in a separate branch if you want others to review the change before adding it to master.
If you update the master branch directly, you can see right away when there have been changes in the master branch in the meantime. If you used a separate branch, you would first have to incorporate the changes made in master into your separate branch and then update the separate  branch on GitHub so that automatic merging with the master branch in GitHub is possible.
